D
concurso{
    talhas[30][30];
    riquezaTotal;
    riquezaAct; (riqueza ainda enterrada)
    listaLigada equipas;
}

talha{
    tesouro (max 50000)
    nEscavadas (se n => 1: determina os pontos a reduzir no arqueologo 10*n)
}

D
equipa {
    nomeEquipa[40] (pose der char á toa) 
    meritoTotal
    elemAct
    arqueolgo MaxElem (arqueolgo com mais pontos)
    listaLigada arqueologos
}

F
arqueolgo{
    nome[40] (pose der char á toa)
    metirito
    certeficado
    penalizacao
    pos[2]
}

F
listaLigada {
    cabeça
    Cauda
    nElemsTotal
    nElems
}

F
noDuplo {
    data
    noAnterior
    noSeguinte
}

D
Iterador {
    incio
    começaCabeça
    nElems
    corrente
}

comandos da cmd:
riqueza, (riquezaAct), 
    Riqueza enterrada: num;

F
terreno
    imprimir:
    -**--
    -**-*
    **--*

D
estrela (nomeEquipa)
if(null)
    Equipa invalida
else
    return MaxElem

f
escavacao (saltoL saltoC nomeEquipa)
    if(null)
        Equipa invalida
    if(L e C == 0)
        invalido
    if(nElems == 0)
        nomeEquipa foi expulsa

D
reforco (nomeEquipa nomeArqueolgo)
    if(null)
        Equipa invalida
    if(ja exists elem)
        Arqueologo invalido
    adiciona elem a equipa

F
equipa (num de equipa do txt)
    if(ja exists equipa ou expulsa)
        Equipa invalida
    if(n existe num no txt)
        Equipa inexistente
    else
        adiciona equipa

D
sair()
    se (todas expulsas)
        Todas as equipas foram expulsas.
        exit();
    se(!riquezaAct)
        Ainda havia tesouros por descobrir...
    else
        Todos os tesouros foram descobertos!
    printf( de todas as equiapas por ordem decrescentes de pontuacao
    nome(de equipa): pontuacao pts; nrDescl(n de desclassificados) descl.; nrComLic (n de classificados) com lic.
    )
ou um comando invalido.